/*
    == SOUL example code ==
    == Designed by Ivan COHEN ==

    This is a dynamics compressor
*/

graph Compressor  [[ main ]]
{
    input  stream float<2> audioIn;
    output stream float<2> audioOut;

    input event float threshold  [[ min: -80.0f,   max:    0.0f,   init: -20.0f  ]],
                      ratio      [[ min:   1.0f,   max:  100.0f,   init:   5.0f  ]],
                      attack     [[ min:   0.01f,  max:  100.0f,   init:   0.25f ]],
                      release    [[ min:  50.0f,   max: 1000.0f,   init: 150.0f  ]];

    let comp = DynamicsCompressor(2) * 2;  // oversampling 2 times

    connection
    {
        audioIn -> comp.audioIn;

        threshold -> comp.thresholdIn;
        ratio -> comp.ratioIn;
        attack -> comp.attackIn;
        release -> comp.releaseIn;

        comp.audioOut -> audioOut;
    }
}

//==============================================================================
processor DynamicsCompressor (int numChannels)
{
    input  stream float<numChannels> audioIn;
    output stream float<numChannels> audioOut;

    input event float thresholdIn, attackIn, releaseIn, ratioIn;

    event thresholdIn (float value)     { threshold = value; updateDerivedParameters(); }
    event attackIn (float value)        { attack    = value; updateDerivedParameters(); }
    event releaseIn (float value)       { release   = value; updateDerivedParameters(); }
    event ratioIn (float value)         { ratio     = value; }

    // User parameters
    float threshold = -40.0f;
    float ratio = 10.0f;
    float attack = 0.1f;
    float release = 200.0f;

    float thrlin, cteAT, cteRL;

    void updateDerivedParameters()
    {
        thrlin = soul::dBtoGain (threshold);
        cteAT = exp (float (-twoPi) * 1000.0f / (attack  * float32 (processor.frequency)));
        cteRL = exp (float (-twoPi) * 1000.0f / (release * float32 (processor.frequency)));
    }

    float maxAbsElement (float<numChannels> v)
    {
        var largest = v[0];

        for (int i = 1; i < numChannels; ++i)
            largest = max (largest, abs (v.at(i)));

        return largest;
    }

    void run()
    {
        updateDerivedParameters();
        float32 s1;

        loop
        {
            let in = audioIn;

            // detector (peak)
            let sideIn = maxAbsElement (in);

            // ballistics filter and envelope generation
            let cte = (sideIn >= s1 ? cteAT : cteRL);
            let env = sideIn + cte * (s1 - sideIn);
            s1 = env;

            // compressor transfer function
            let cv = (env <= thrlin ? 1.0f : pow (env / thrlin, 1.0f / ratio - 1.0f));

            // processing (VCA) and output
            audioOut << in * cv;

            advance();
        }
    }
}

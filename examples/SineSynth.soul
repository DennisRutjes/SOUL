/*
    == SOUL example code ==

    A simple sine-wave synthesiser, featuring pitch-bend support, a simple voice
    allocator and envelope generator.
*/

graph SineSynth  [[ main ]]
{
    input event
    {
        midi::Message midiIn;
        float volume [[ name: "Volume", min: -40, max: 0,  init: -6, unit: "dB", step: 1 ]];
    }

    output stream float audioOut;

    let
    {
        midiParser = midi::MPEParser;

        voices = Voice[8];
        voiceAllocator = RoundRobinVoiceAllocator(8);

        gainParameter = GainParameterRamp (1.0f);
        volumeProcessor = Gain;
    }

    connection
    {
        midiIn -> midiParser.parseMIDI;
        volume -> gainParameter.gainDb;

        midiParser.eventOut     -> voiceAllocator.eventIn;
        voiceAllocator.eventOut -> voices.eventIn;

        // Sum the voices audio out to the output
        voices.audioOut -> volumeProcessor.audioIn;

        gainParameter.parameterOut -> volumeProcessor.gain;

        volumeProcessor.audioOut -> audioOut;
    }
}

//==============================================================================
processor SineOsc
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::PitchBend) eventIn;

    output stream float audioOut;

    event eventIn (soul::NoteEvents::NoteOn e)
    {
        notePitch = e.note;
        bendSemitones = 0.0f;
        calculatePhaseIncrement();
    }

    event eventIn (soul::NoteEvents::PitchBend e)
    {
        bendSemitones = e.bendSemitones;
        calculatePhaseIncrement();
    }

    float bendSemitones, notePitch, phase, phaseIncrement;

    void calculatePhaseIncrement()
    {
        let noteFrequency = soul::noteNumberToFrequency (notePitch + bendSemitones);
        phaseIncrement = noteFrequency / float (processor.frequency);
    }

    void run()
    {
        phaseIncrement = 0.1f;

        loop
        {
            phase = phase + phaseIncrement;

            while (phase > 1.0f)
                phase = phase - 1.0f;

            audioOut << sin(float(2.0f * pi * phase));
            advance();
        }
    }
}

//==============================================================================
processor Envelope (float targetLevel, float attackSeconds, float releaseSeconds)
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::NoteOff) eventIn;

    output stream float audioOut;

    event eventIn (soul::NoteEvents::NoteOn e)      { active = true; }
    event eventIn (soul::NoteEvents::NoteOff e)     { active = false; }

    bool active = false;

    // Calculate the multiplier that gives the required release milliseconds
    float calculateReleaseMultiplier()
    {
        let inverse = 1.0 / (processor.frequency * releaseSeconds);
        return float(pow(0.0001, inverse));
    }

    void run()
    {
        let attackSamples = attackSeconds * float(processor.frequency);
        let attackIncrement = targetLevel / attackSamples;
        let releaseMultiplier = calculateReleaseMultiplier();

        var value = 0.0f;

        loop
        {
            // Waiting for note on
            while (! active)
            {
                audioOut << value;
                advance();
            }

            // Attacking
            while (active && value < targetLevel)
            {
                value += attackIncrement;
                audioOut << value;
                advance();
            }

            // Sustaining
            while (active)
            {
                audioOut << value;
                advance();
            }

            // Releasing
            while (! active && value > 0.00001f)
            {
                value *= releaseMultiplier;
                audioOut << value;
                advance();
            }

            // If we're still not active, ensure the value is pulled to 0
            if (! active)
                value = 0.0f;
        }
    }
}

//==============================================================================
processor Gain
{
    input  stream float audioIn, gain;
    output stream float audioOut;

    void run()
    {
        loop
        {
            audioOut << audioIn * gain;
            advance();
        }
    }
}

//==============================================================================
graph Voice
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::NoteOff,
                 soul::NoteEvents::PitchBend) eventIn;

    output stream float audioOut;

    let
    {
        Osc = SineOsc;
        AmplitudeEnvelope = Envelope(0.2f, 0.02f, 0.1f);
    }

    connection
    {
        eventIn -> Osc.eventIn,
                   AmplitudeEnvelope.eventIn;

        Osc.audioOut               -> Gain.audioIn;
        AmplitudeEnvelope.audioOut -> Gain.gain;

        Gain.audioOut -> audioOut;
    }
}

//==============================================================================
processor RoundRobinVoiceAllocator (int voiceCount)
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::NoteOff,
                 soul::NoteEvents::PitchBend) eventIn;

    output event (soul::NoteEvents::NoteOn,
                  soul::NoteEvents::NoteOff,
                  soul::NoteEvents::PitchBend) eventOut[voiceCount];

    event eventIn (soul::NoteEvents::NoteOn e)
    {
        wrap<voiceCount> allocatedVoice = 0;
        var allocatedVoiceAge = voiceInfo[allocatedVoice].voiceAge;

        // Find the oldest voice to reuse
        for (int i = 1; i < voiceCount; i++)
        {
            let age = voiceInfo.at(i).voiceAge;

            if (age < allocatedVoiceAge)
            {
                allocatedVoiceAge = age;
                allocatedVoice = wrap<voiceCount>(i);
            }
        }

        // Update the VoiceInfo for our chosen voice
        voiceInfo[allocatedVoice].channel  = e.channel;
        voiceInfo[allocatedVoice].note     = e.note;
        voiceInfo[allocatedVoice].voiceAge = nextAllocatedVoiceAge++;

        // Send the note on to the voice
        eventOut[allocatedVoice] << e;
    }

    event eventIn (soul::NoteEvents::NoteOff e)
    {
        // Release all voices associated with this note/channel
        wrap<voiceCount> voice = 0;

        loop (voiceCount)
        {
            if (voiceInfo[voice].channel == e.channel
                 && voiceInfo[voice].note == e.note)
            {
                // Mark the voice as being unused
                voiceInfo[voice].voiceAge = nextUnallocatedVoiceAge++;
                eventOut[voice] << e;
            }

            ++voice;
        }
    }

    event eventIn (soul::NoteEvents::PitchBend e)
    {
        // Forward the pitch bend to all notes on this channel
        wrap<voiceCount> voice = 0;

        loop (voiceCount)
        {
            if (voiceInfo[voice].channel == e.channel)
                eventOut[voice] << e;

            voice++;
        }
    }

    struct VoiceInfo
    {
        bool active;
        float note;
        int channel, voiceAge;
    }

    int nextAllocatedVoiceAge   = 1000000000;
    int nextUnallocatedVoiceAge = 1;

    VoiceInfo[voiceCount] voiceInfo;

    void run()
    {
        loop { advance(); }
    }
}

//==============================================================================
// Converts an input event (as a gain in db) to a ramped stream
processor GainParameterRamp (float slewRate)
{
    input event float gainDb;
    output stream float parameterOut;

    event gainDb (float targetDb)
    {
        targetValue = soul::dBtoGain (targetDb);

        let diff = targetValue - currentValue;
        let rampSeconds = abs (diff) / slewRate;

        rampSamples   = int (processor.frequency * rampSeconds);
        rampIncrement = diff / float (rampSamples);
    }

    float targetValue;
    float currentValue;
    float rampIncrement;
    int rampSamples;

    void run()
    {
        loop
        {
            if (rampSamples > 0)
            {
                currentValue += rampIncrement;
                --rampSamples;
            }

            parameterOut << currentValue;
            advance();
        }
    }
}

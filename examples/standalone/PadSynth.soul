/*
    == SOUL example code ==

    A fairly complex expressive synthesiser with some effects and
    dynamic parameters.
*/

graph PadSynth  [[main]]
{
    input
    {
        event midi::Message midiIn;

        event float      cutoff                [[ name: "Cutoff",                min: 0,       max: 127,    init: 80,    unit: "semi",   step: 0.1   ]];
        event float      resonance             [[ name: "Resonance",             min: 0,       max: 100,    init: 20,    unit: "%",      step: 1     ]];
        event float      ampAttack             [[ name: "Amp Attack",            min: 0,       max: 100,    init: 80,    unit: "%",      step: 1     ]];
        event float      ampDecay              [[ name: "Amp Decay",             min: 0,       max: 100,    init: 66,    unit: "%",      step: 1     ]];
        event float      ampSustain            [[ name: "Amp Sustain",           min: 0,       max: 100,    init: 100,   unit: "%",      step: 1     ]];
        event float      ampRelease            [[ name: "Amp Release",           min: 0,       max: 100,    init: 88,    unit: "%",      step: 1     ]];
        event float      ampSensitivity        [[ name: "Amp Sensitivity",       min: 0,       max: 100,    init: 50,    unit: "%",      step: 1     ]];
        event float      osc1waveshape         [[ name: "Osc1 Waveshape",        min: 0,       max: 100,    init: 100,   unit: "%",      step: 1     ]];
        event float      osc1detuneSemitones   [[ name: "Osc1 Detune",           min: -24,     max: 24,     init: 0,     unit: "semi",   step: 1     ]];
        event float      osc1detune            [[ name: "Osc1 Detune",           min: -100,    max: 100,    init: 0,     unit: "cent",   step: 1     ]];
        event float      osc2waveshape         [[ name: "Osc2 Waveshape",        min: 0,       max: 100,    init: 1.0,   unit: "%",      step: 1     ]];
        event float      osc2detuneSemitones   [[ name: "Osc2 Detune",           min: -24,     max: 24,     init: 0,     unit: "semi",   step: 1     ]];
        event float      osc2detune            [[ name: "Osc2 Detune",           min: -100,    max: 100,    init: 1,     unit: "cent",   step: 1     ]];
        event float      oscillatorMix         [[ name: "Osc Mix",               min: 0,       max: 100,    init: 22,    unit: "%",      step: 1     ]];
        event float      filterAttack          [[ name: "Filter Attack",         min: 0,       max: 100,    init: 80,    unit: "%",      step: 1     ]];
        event float      filterDecay           [[ name: "Filter Decay",          min: 0,       max: 100,    init: 74,    unit: "%",      step: 1     ]];
        event float      filterSustain         [[ name: "Filter Sustain",        min: 0,       max: 100,    init: 75,    unit: "%",      step: 1     ]];
        event float      filterRelease         [[ name: "Filter Release",        min: 0,       max: 100,    init: 66,    unit: "%",      step: 1     ]];
        event float      filterSensitivity     [[ name: "Filter Sensitivity",    min: 0,       max: 100,    init: 25,    unit: "%",      step: 1     ]];
        event float      filterEnvMod          [[ name: "Filter Env Mod",        min: -24,     max: 24,     init: 12,    unit: "semi",   step: 1     ]];
        event float      filterCutoffTrack     [[ name: "Filter Cutoff Track",   min: 0,       max: 1,      init: 1,     unit: "semi",   step: 0.01  ]];
        dryWetMixer.mix  dryWetMix             [[ name: "Dry Wet Mix",           min: 0,       max: 100,    init: 100,   unit: "%",      step: 1     ]];
    }

    output stream float audioOut;

    let
    {
        delay = Delay (20000, 0.5f);
        oscillators = Oscillators;
        dryWetMixer = soul::Mixers::DynamicMix (float, 100.0f);
    }

    connection
    {
        midiIn               -> oscillators.midiIn;

        cutoff               -> oscillators.cutoffParam;
        resonance            -> oscillators.resonanceParam;
        ampAttack            -> oscillators.ampAttack;
        ampDecay             -> oscillators.ampDecay;
        ampSustain           -> oscillators.ampSustain;
        ampRelease           -> oscillators.ampRelease;
        ampSensitivity       -> oscillators.ampSensitivity;
        osc1waveshape        -> oscillators.osc1waveshape;
        osc1detuneSemitones  -> oscillators.osc1detuneSemitones;
        osc1detune           -> oscillators.osc1detune;
        osc2waveshape        -> oscillators.osc2waveshape;
        osc2detuneSemitones  -> oscillators.osc2detuneSemitones;
        osc2detune           -> oscillators.osc2detune;
        filterAttack         -> oscillators.filterAttack;
        filterDecay          -> oscillators.filterDecay;
        filterSustain        -> oscillators.filterSustain;
        filterRelease        -> oscillators.filterRelease;
        filterSensitivity    -> oscillators.filterSensitivity;
        oscillatorMix        -> oscillators.oscillatorMix;
        filterEnvMod         -> oscillators.filterEnvMod;
        filterCutoffTrack    -> oscillators.filterCutoffTrack;

        oscillators.audioOut -> delay.audioIn;
        delay.audioOut       -> Reverb.audioIn;

        oscillators.audioOut -> dryWetMixer.in1;
        Reverb.audioOut      -> dryWetMixer.in2;
        dryWetMixer.out      -> audioOut;
    }
}

//==============================================================================
namespace NoteHandler
{
    struct NoteInfo
    {
        int channel;
        float bendSemitones;
        float note;
        float pressure;
        float slide;
    }

    struct NoteHandler
    {
        float currentVelocity;
        float currentNote;
        float currentBendSemitones;
        float currentPressure;
        float currentSlide;

        int maxNotes;

        NoteInfo[16] noteArray;
        wrap<16> activeNotes;
    }

    NoteHandler create()
    {
        NoteHandler r;
        r.currentVelocity = 0;
        r.currentNote = 0;
        r.activeNotes = 0;
        r.maxNotes = 16;
        return r;
    }

    void addNote (NoteHandler& this, int channel, float note, float velocity)
    {
        // Initial note velocity is used
        if (int(this.activeNotes) == 0)
            this.currentVelocity = velocity;

        if (int(this.activeNotes) < this.maxNotes)
        {
            this.noteArray[this.activeNotes].channel = channel;
            this.noteArray[this.activeNotes].note = note;
            this.noteArray[this.activeNotes].bendSemitones = 0;
            this.activeNotes++;
        }

        this.currentNote = note;
        this.currentBendSemitones = 0;
        this.currentPressure = 0;
        this.currentSlide = 0;
    }

    void removeNote (NoteHandler& this, int channel, float note)
    {
        wrap<this.noteArray.size> readPoint = 0;
        wrap<this.noteArray.size> writePoint = 0;

        while (readPoint < int(this.activeNotes))
        {
            if (this.noteArray[readPoint].note != note)
            {
                this.noteArray[writePoint] = this.noteArray[readPoint];
                ++writePoint;
            }

            ++readPoint;
        }

        this.activeNotes = writePoint;

        // Update the current active note
        if (int(this.activeNotes) > 0)
        {
            this.currentNote = this.noteArray[this.activeNotes - 1].note;
            this.currentBendSemitones = this.noteArray[this.activeNotes - 1].bendSemitones;
        }
    }

    void addPitchBend (NoteHandler& this, int channel, float bendSemitones)
    {
        // Update all notes on this channel
        for (int i = 0; i < int(this.activeNotes); ++i)
            if (this.noteArray.at(i).channel == channel)
                this.noteArray.at(i).bendSemitones = bendSemitones;

        if (int(this.activeNotes) > 0)
            this.currentBendSemitones = this.noteArray[this.activeNotes - 1].bendSemitones;
    }

    void addPressure (NoteHandler& this, int channel, float pressure)
    {
        for (int i = 0; i < int(this.activeNotes); ++i)
            if (this.noteArray.at(i).channel == channel)
                this.noteArray.at(i).pressure = pressure;

        if (int(this.activeNotes) > 0)
            this.currentPressure = this.noteArray[this.activeNotes - 1].pressure;
    }

    void addSlide (NoteHandler& this, int channel, float slide)
    {
        for (int i = 0; i < int(this.activeNotes); ++i)
            if (this.noteArray.at(i).channel == channel)
                this.noteArray.at(i).slide = slide;

        if (int(this.activeNotes) > 0)
            this.currentSlide= this.noteArray[this.activeNotes - 1].slide;
    }

    float getCurrentNote (NoteHandler& this)        { return this.currentNote + this.currentBendSemitones; }
    float getCurrentVelocity (NoteHandler& this)    { return this.currentVelocity; }
    float getCurrentPressure (NoteHandler& this)    { return this.currentPressure; }
    float getCurrentSlide (NoteHandler& this)       { return this.currentSlide; }

    bool isNoteActive (NoteHandler& this)           { return int(this.activeNotes) != 0; }
}

//==============================================================================
/// PolyBlep oscillator - variable waveshape between 0.0 (saw) and 1.0 (square)
processor PolyBlep
{
    input event float waveshape, detuneSemitones, detune;
    input stream float frequencyIn;
    output stream float audioOut;

    event waveshape (float f)
    {
        waveshapeValue = f * 0.01f;
    }

    event detuneSemitones (float f)
    {
        detuneSemitonesValue = f;
        frequencyMultiplier = pow (2.0f, (detuneSemitonesValue + detuneValue) / 12.0f);
    }

    event detune (float f)
    {
        detuneValue = f * 0.01f;
        frequencyMultiplier = pow (2.0f, (detuneSemitonesValue + detuneValue) / 12.0f);
    }

    let frequencyScaling = 1.0f / float(processor.frequency);

    float normalisedPhase = 0.0f;
    float normalisedPhaseIncrement = 0.0f;

    float waveshapeValue = 0.0f;
    float detuneSemitonesValue = 0.0f;
    float detuneValue = 0.0f;
    float frequencyMultiplier = 1.0f;

    float blep (float t2)
    {
        float t = t2;

        if (t < normalisedPhaseIncrement)
        {
            t /= normalisedPhaseIncrement;
            return (t + t) - (t * t) - 1.0f;
        }

        if (t > (1.0f - normalisedPhaseIncrement))
        {
            t = (t - 1.0f) / normalisedPhaseIncrement;
            return (t * t) + (t + t) + 1.0f;
        }

        return 0;
    }

    void run()
    {
        loop
        {
            // Generate phase increment from our input frequency
            normalisedPhaseIncrement = frequencyIn * frequencyScaling * frequencyMultiplier;

            while (normalisedPhase >= 1.0f)
                normalisedPhase -= 1.0f;

            var normalisedPhase2 = normalisedPhase + 0.5f;

            if (normalisedPhase2 > 1.0f)
                normalisedPhase2 -= 1.0f;

            let sawValue = (2.0f * normalisedPhase) - 1.0f - blep (normalisedPhase);
            var squareValue = -blep (normalisedPhase) + blep (normalisedPhase2);

            squareValue += (normalisedPhase <= 0.5f) ? -1.0f : 1.0f;

            // Mix the square and saw waves together
            audioOut << squareValue * waveshapeValue + (sawValue * (1.0f - waveshapeValue));

            normalisedPhase += normalisedPhaseIncrement;
            advance();
        }
    }
}

//==============================================================================
// Runs an ADSR envelope using the input as a trigger
processor ADSREnvelope
{
    input stream float triggerLevel;
    output stream float envelopeLevel;
    input event float attack, decay, sustain, release, sensitivity;

    event attack (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let secondsToLinearStep = 1.0 / (sampleRate * seconds);

        attackRamp = secondsToLinearStep;
    }

    event decay (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let inverse = 1.0 / (sampleRate * seconds);
        let secondsToMultiplier = pow (0.0001, inverse);

        decayMultiplier = secondsToMultiplier;
    }

    event sustain (float f)
    {
        sustainLevel = float64 (f) * 0.01f;
    }

    event release (float f)
    {
        let seconds = 0.001 + 9.999 * pow (f * 0.01f, 4.0f);
        let inverse = 1.0 / (sampleRate * seconds);
        let secondsToMultiplier = pow (0.0001, inverse);

        releaseMultiplier = secondsToMultiplier;
    }

    event sensitivity (float f)
    {
        velocitySensitivity = f * 0.01f;
    }

    const float sampleRate = float (processor.frequency);

    float64 attackRamp = 0.01;
    float64 decayMultiplier = 0.995;
    float64 sustainLevel = 1.0;
    float64 releaseMultiplier = 0.99991;
    float32 velocitySensitivity = 0.0f;
    float64 targetValue = 1.0;

    void calculateTargetValue (float noteVelocity)
    {
        // Use the velocitySensitivity to decide how the noteVelocity affects the target volume
        // We determine a dB attenuation range, then the note velocity decides where we are on it
        // Full velocity sensitivity is -12dB

        // We use 100 as a 'loud' note, so that's 0.75 out of 100 as 'normal', any higher velocity will be louder
        let attenuation = -12.0f * velocitySensitivity * (0.75f - noteVelocity);

        targetValue = pow (10.0f, attenuation / 10.0f);
    }

    void run()
    {
        float64 value = 0;
        bool released = false;

        loop
        {
            if (triggerLevel > 0)
            {
                // TODO: Shouldn't need this
                released = false;

                // Use the value of the trigger to modify our target value
                calculateTargetValue (triggerLevel);

                while (! released && value < targetValue)
                {
                    value += attackRamp;
                    envelopeLevel << float(value);
                    advance();

                    released = (triggerLevel <= 0);
                }

                // Cap it to the target value
                value = min(value, targetValue);

                // Decay stage
                while (! released && value > (targetValue * sustainLevel))
                {
                    value = value * decayMultiplier;
                    envelopeLevel << float(value);
                    advance();

                    released = (triggerLevel <= 0);
                }

                // Sustain stage
                while (! released)
                {
                    envelopeLevel << float(value);
                    advance();
                    released = (triggerLevel <= 0);
                }
            }

            value = value * releaseMultiplier;

            envelopeLevel << float(value);
            advance();
        }
    }
}

//==============================================================================
processor LowPassFilter
{
    input  stream float gainIn, cutoffIn, resonanceIn, audioIn;
    output stream float audioOut;

    let numTableEntries = 128;
    let maxResonance = 100;
    let samplesBetweenFactorUpdates = 64;

    struct FilterTerms
    {
        float a, b, c;
    }

    struct FrequencySettings
    {
        FilterTerms[maxResonance + 1] resonance;
    }

    struct PrecalcTerms
    {
        FrequencySettings[numTableEntries] frequency;
    }

    PrecalcTerms precalcTerms;

    FilterTerms calcTermEntry (float frequency, float resonance)
    {
        FilterTerms result;

        let r = 1.4f - (resonance * 0.0135f);
        let f = clamp (soul::noteNumberToFrequency(frequency), 0.0f, 20000.0f);
        let c = 1.0f / tan (float(pi) * (10.0f + f) / float32(processor.frequency));

        result.a = 1.0f / (1.0f + r * c + c * c);
        result.b = 2.0f * (1.0f - c * c) * result.a;
        result.c = (1.0f - r * c + c * c) * result.a;

        return result;
    }

    void initialiseTerms()
    {
        for (int i = 0; i < numTableEntries; ++i)
            for (int j = 0; j <= maxResonance; ++j)
                precalcTerms.frequency.at(i).resonance.at(j) = calcTermEntry (float(i), float(j));
    }

    void updateFactors (float cutoff, float resonance)
    {
        cutoff    = clamp (cutoff, 0.0f, float(numTableEntries - 2));
        resonance = clamp (resonance, 0.0f, float(maxResonance - 1));

        // Interpolate the cutoff
        let cutoffInterpolation = cutoff - int(cutoff);

        let resonanceEntry = wrap<maxResonance>(int(resonance));
        var cutoffEntry = wrap<numTableEntries>(int(cutoff));

        let terms1_a = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].a;
        let terms1_b = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].b;
        let terms1_c = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].c;

        ++cutoffEntry;

        let terms2_a = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].a;
        let terms2_b = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].b;
        let terms2_c = precalcTerms.frequency[cutoffEntry].resonance[resonanceEntry].c;

        factor_a1 = terms1_a + (terms2_a - terms1_a) * cutoffInterpolation;
        factor_a2 = 2.0f * factor_a1;
        factor_b1 = terms1_b + (terms2_b - terms1_b) * cutoffInterpolation;
        factor_b2 = terms1_c + (terms2_c - terms1_c) * cutoffInterpolation;
    }

    float factor_a1, factor_a2, factor_b1, factor_b2;

    void run()
    {
        initialiseTerms();
        float in_1, in_2, out_1, out_2;

        loop
        {
            updateFactors(cutoffIn, resonanceIn);

            loop (samplesBetweenFactorUpdates)
            {
                let in = audioIn;

                let f = factor_a1 * (in + in_1)
                         + factor_a2 * in_2
                         - factor_b1 * out_1
                         - factor_b2 * out_2;

                out_2 = out_1;
                out_1 = f;
                in_2 = in_1;
                in_1 = in;

                audioOut << f * gainIn * 0.2f;
                advance();
            }
        }
    }
}

//==============================================================================
processor ParameterStream
{
    input event float parameterUpdate;
    output stream float audioOut;

    event parameterUpdate (float f)
    {
        currentValue = f;
    }

    void run()
    {
        loop
        {
            audioOut << currentValue;
            advance();
        }
    }

    float currentValue;
}

//==============================================================================
/*
    Voice control processor - receives NoteOn/NoteOff events, and generates control signals
    for our oscillators/filters
*/
processor Controller
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::NoteOff,
                 soul::NoteEvents::PitchBend,
                 soul::NoteEvents::Pressure,
                 soul::NoteEvents::Slide) eventIn;

    output stream float note1_noteOut, note1_frequencyOut, note1_velocity, note1_active,
                        note2_frequencyOut, note1_pressure, note1_slide;

    event eventIn (soul::NoteEvents::NoteOn e)     { NoteHandler::addNote      (noteHandler, e.channel, e.note, e.velocity); }
    event eventIn (soul::NoteEvents::NoteOff e)    { NoteHandler::removeNote   (noteHandler, e.channel, e.note); }
    event eventIn (soul::NoteEvents::PitchBend e)  { NoteHandler::addPitchBend (noteHandler, e.channel, e.bendSemitones); }
    event eventIn (soul::NoteEvents::Pressure p)   { NoteHandler::addPressure  (noteHandler, p.channel, p.pressure); }
    event eventIn (soul::NoteEvents::Slide s)      { NoteHandler::addSlide     (noteHandler, s.channel, s.slide); }

    NoteHandler::NoteHandler noteHandler;

    void run()
    {
        float multiplier = 1.0f;
        int sampleCount = 0;

        noteHandler = NoteHandler::create();

        loop
        {
            ++sampleCount;

            if (sampleCount == 1000)
            {
                sampleCount = 0;
                multiplier += 0.001f;

                if (multiplier >= 1.01f)
                    multiplier = 1.0f;
            }

            let noteFrequency = soul::noteNumberToFrequency (NoteHandler::getCurrentNote(noteHandler));

            note1_noteOut      << NoteHandler::getCurrentNote(noteHandler);
            note1_frequencyOut << noteFrequency;
            note2_frequencyOut << noteFrequency * multiplier;
            note1_velocity     << NoteHandler::getCurrentVelocity(noteHandler);
            note1_active       << (NoteHandler::isNoteActive(noteHandler) ? NoteHandler::getCurrentVelocity(noteHandler) : 0.0f);
            note1_pressure     << NoteHandler::getCurrentPressure(noteHandler);
            note1_slide        << NoteHandler::getCurrentSlide(noteHandler);

            advance();
        }
    }
}

//==============================================================================
processor CutoffHandler
{
    input stream float cutoffIn, envelopeIn, envelopeModIn, trackModIn, noteIn, modIn;
    output stream float cutoffOut;

    void run()
    {
        // The cutoff has a base cutoff value
        // It is modified by the envelope and by key-tracking
        loop
        {
            cutoffOut << cutoffIn
                          + (envelopeIn * envelopeModIn)
                          + ((noteIn - 60.0f) * trackModIn)
                          + (modIn * 36.0f);
            advance();
        }
    }
}

//==============================================================================
graph Voice
{
    input event (soul::NoteEvents::NoteOn,
                 soul::NoteEvents::NoteOff,
                 soul::NoteEvents::PitchBend,
                 soul::NoteEvents::Pressure,
                 soul::NoteEvents::Slide) eventIn;

    input event float cutoffParam, resonanceParam,
                      ampAttack, ampDecay, ampSustain, ampRelease, ampSensitivity,
                      osc1waveshape, osc1detuneSemitones, osc1detune,
                      osc2waveshape, osc2detuneSemitones, osc2detune,
                      filterAttack, filterDecay, filterSustain, filterRelease, filterSensitivity,
                      oscillatorMix,
                      filterEnvMod, filterCutoffTrack;

    output stream float audioOut;

    let
    {
        osc1                = PolyBlep;
        osc2                = PolyBlep;
        amplitudeEnvelope   = ADSREnvelope;
        cutoffEnvelope      = ADSREnvelope;
        voiceController     = Controller;
        voiceOscillatorMix  = soul::Mixers::DynamicMix (float, 100.0f);
        voiceCutoffHandler  = CutoffHandler;
        voiceLowPassFilter  = LowPassFilter;

        cutoff              = ParameterStream;
        resonance           = ParameterStream;
        oscillatorMixParam  = ParameterStream;
        cutoffEnvMod        = ParameterStream;
        cutoffKeytrackMod   = ParameterStream;
    }

    connection
    {
        cutoffParam         -> cutoff.parameterUpdate;
        resonanceParam      -> resonance.parameterUpdate;
        ampAttack           -> amplitudeEnvelope.attack;
        ampDecay            -> amplitudeEnvelope.decay;
        ampSustain          -> amplitudeEnvelope.sustain;
        ampRelease          -> amplitudeEnvelope.release;
        ampSensitivity      -> amplitudeEnvelope.sensitivity;
        osc1waveshape       -> osc1.waveshape;
        osc1detuneSemitones -> osc1.detuneSemitones;
        osc1detune          -> osc1.detune;
        osc2waveshape       -> osc2.waveshape;
        osc2detuneSemitones -> osc2.detuneSemitones;
        osc2detune          -> osc2.detune;
        filterAttack        -> cutoffEnvelope.attack;
        filterDecay         -> cutoffEnvelope.decay;
        filterSustain       -> cutoffEnvelope.sustain;
        filterRelease       -> cutoffEnvelope.release;
        filterSensitivity   -> cutoffEnvelope.sensitivity;
        oscillatorMix       -> oscillatorMixParam.parameterUpdate;
        filterEnvMod        -> cutoffEnvMod.parameterUpdate;
        filterCutoffTrack   -> cutoffKeytrackMod.parameterUpdate;

        eventIn -> voiceController.eventIn;

        voiceController.note1_frequencyOut -> osc1.frequencyIn;
        voiceController.note2_frequencyOut -> osc2.frequencyIn;
        voiceController.note1_active       -> amplitudeEnvelope.triggerLevel,
                                              cutoffEnvelope.triggerLevel;

        osc1.audioOut                -> voiceOscillatorMix.in1;
        osc2.audioOut                -> voiceOscillatorMix.in2;
        oscillatorMixParam.audioOut  -> voiceOscillatorMix.mix;

        cutoff.audioOut                     -> voiceCutoffHandler.cutoffIn;
        cutoffEnvelope.envelopeLevel        -> voiceCutoffHandler.envelopeIn;
        cutoffEnvMod.audioOut               -> voiceCutoffHandler.envelopeModIn;
        cutoffKeytrackMod.audioOut          -> voiceCutoffHandler.trackModIn;
        voiceController.note1_noteOut       -> voiceCutoffHandler.noteIn;
        voiceController.note1_slide         -> voiceCutoffHandler.modIn;

        voiceOscillatorMix.out          -> voiceLowPassFilter.audioIn;
        voiceCutoffHandler.cutoffOut    -> voiceLowPassFilter.cutoffIn;
        resonance.audioOut              -> voiceLowPassFilter.resonanceIn;
        amplitudeEnvelope.envelopeLevel -> voiceLowPassFilter.gainIn;

        voiceLowPassFilter.audioOut -> audioOut;
    }
}

//==============================================================================
graph Reverb
{
    input  stream float audioIn;
    output dryWetMixer.out audioOut;

    let
    {
        allPass_225 = AllPassFilter(225);
        allPass_341 = AllPassFilter(341);
        allPass_441 = AllPassFilter(441);
        allPass_556 = AllPassFilter(556);

        comb_1116 = CombFilter(1116);
        comb_1188 = CombFilter(1188);
        comb_1277 = CombFilter(1277);
        comb_1356 = CombFilter(1356);
        comb_1422 = CombFilter(1422);
        comb_1491 = CombFilter(1491);
        comb_1557 = CombFilter(1557);
        comb_1617 = CombFilter(1617);

        dryWetMixer = soul::Mixers::FixedSum (float, 0.8f, 0.01485f);
    }

    connection
    {
        audioIn -> comb_1116.audioIn,
                   comb_1188.audioIn,
                   comb_1277.audioIn,
                   comb_1356.audioIn,
                   comb_1422.audioIn,
                   comb_1491.audioIn,
                   comb_1557.audioIn,
                   comb_1617.audioIn,
                   dryWetMixer.in1;

        comb_1116.audioOut,
        comb_1188.audioOut,
        comb_1277.audioOut,
        comb_1356.audioOut,
        comb_1422.audioOut,
        comb_1491.audioOut,
        comb_1557.audioOut,
        comb_1617.audioOut  -> allPass_225.audioIn;

        allPass_225.audioOut -> allPass_341.audioIn;
        allPass_341.audioOut -> allPass_441.audioIn;
        allPass_441.audioOut -> allPass_556.audioIn;
        allPass_556.audioOut -> dryWetMixer.in2;
    }
}

//==============================================================================
processor AllPassFilter (int bufferLength)
{
    input  stream float audioIn;
    output stream float audioOut;

    void run()
    {
        float[bufferLength] buffer;
        wrap<buffer.size> bufferIndex;

        loop
        {
            let bufferedValue = buffer[bufferIndex];
            buffer[bufferIndex++] = audioIn + (bufferedValue * 0.5f);

            audioOut << bufferedValue - audioIn;
            advance();
        }
    }
}

//==============================================================================
processor CombFilter (int bufferLength)
{
    input  stream float audioIn;
    output stream float audioOut;

    void run()
    {
        float[bufferLength] buffer;
        wrap<buffer.size> bufferIndex;

        let damp          = 0.2f;
        let feedbackLevel = 0.95f;

        float last;

        loop
        {
            let out = buffer[bufferIndex];
            last = (out * (1.0f - damp)) + (last * damp);
            buffer[bufferIndex++] = audioIn + (last * feedbackLevel);

            audioOut << out;
            advance();
        }
    }
}

//==============================================================================
processor Delay (int delay, float feedbackLevel)
{
    input  stream float audioIn;
    output stream float audioOut;

    float[delay] delayBuffer;

    void run()
    {
        wrap<delayBuffer.size> pos;

        loop
        {
            delayBuffer[pos] = delayBuffer[pos] * feedbackLevel + audioIn;
            audioOut << delayBuffer[pos];

            ++pos;
            advance();
        }
    }
}

//==============================================================================
graph Oscillators
{
    input midiParser.parseMIDI midiIn;

    input event float cutoffParam, resonanceParam,
                      ampAttack, ampDecay, ampSustain, ampRelease, ampSensitivity,
                      osc1waveshape, osc1detuneSemitones, osc1detune,
                      osc2waveshape, osc2detuneSemitones, osc2detune,
                      filterAttack, filterDecay, filterSustain, filterRelease, filterSensitivity,
                      oscillatorMix,
                      filterEnvMod, filterCutoffTrack;

    output stream float audioOut;

    let
    {
        midiParser = midi::MPEParser;

        voices = Voice[8];
        voiceAllocator = soul::VoiceAllocators::Basic(8);
    }

    connection
    {
        // Forward events
        cutoffParam         -> voices.cutoffParam;
        resonanceParam      -> voices.resonanceParam;
        ampAttack           -> voices.ampAttack;
        ampDecay            -> voices.ampDecay;
        ampSustain          -> voices.ampSustain;
        ampRelease          -> voices.ampRelease;
        ampSensitivity      -> voices.ampSensitivity;
        filterAttack        -> voices.filterAttack;
        filterDecay         -> voices.filterDecay;
        filterSustain       -> voices.filterSustain;
        filterRelease       -> voices.filterRelease;
        filterSensitivity   -> voices.filterSensitivity;
        osc1waveshape       -> voices.osc1waveshape;
        osc1detuneSemitones -> voices.osc1detuneSemitones;
        osc1detune          -> voices.osc1detune;
        osc2waveshape       -> voices.osc2waveshape;
        osc2detuneSemitones -> voices.osc2detuneSemitones;
        osc2detune          -> voices.osc2detune;
        oscillatorMix       -> voices.oscillatorMix;
        filterEnvMod        -> voices.filterEnvMod;
        filterCutoffTrack   -> voices.filterCutoffTrack;

        // Pass the events to the voice allocator
        midiParser.eventOut  -> voiceAllocator.eventIn;

        // Pass the allocated events to the voice bank
        voiceAllocator.voiceEventOut -> voices.eventIn;

        // Now pass through reverb
        voices.audioOut -> audioOut;
    }
}

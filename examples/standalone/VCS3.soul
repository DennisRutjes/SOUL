/*
    == SOUL example code ==
    == Designed by Ivan COHEN ==

    This is an algorithm simulating the VCS3 diode ladder filter from EMS, using
    "semi-implicit" resolution of the nonlinear equations.

    Bibliography :
    - Efficient Polynomial Implementation of the EMS VCS3 Filter Model from
    Stefano Zambon and Federico Fontana
    - Talks from mystran on http://www.kvraudio.com/forum/viewtopic.php?t=349859
    - The Art of VA Filter Design by Vadim Zavalishin

    See the slides of the talk "Virtual Analog Audio Effects Simulation with JUCE 4"
    at JUCE Summit 2015 for more information.
*/

graph VCS3  [[ main ]]
{
    input  stream float audioIn;    // just using mono in and out
    output stream float audioOut;

    input event float cutoffFrequency   [[ min: 40.0f,  max: 20000.0f,  init: 200.0f ]];
    input event float resonance         [[ min: 0.5f,   max: 7.0f,      init: 6.0f   ]];

    let diodeLadder = EMSVCS3Filter * 4; // oversampling 4 times

    connection
    {
        audioIn         -> diodeLadder.audioIn;
        cutoffFrequency -> diodeLadder.cutoffFrequencyIn;
        resonance       -> diodeLadder.resonanceIn;

        diodeLadder.audioOut -> audioOut;
    }
}

//==============================================================================
processor EMSVCS3Filter
{
    input stream float audioIn;
    output stream float audioOut;

    input event float cutoffFrequencyIn, resonanceIn;

    event cutoffFrequencyIn (float value)  { cutoffFrequency = value; updateDerivedVariables(); }
    event resonanceIn (float value)        { resonance       = value; updateDerivedVariables(); }

    // parameters
    float cutoffFrequency = 1000.0f;
    float resonance = 5.0f;

    float f, r;

    // Updates the internal variables
    void updateDerivedVariables()
    {
        f = tan (float (pi) * cutoffFrequency / float32 (processor.frequency));
        r = resonance;
    }

    // Pade-approx for tanh(sqrt(x))/sqrt(x) from mystran
    float tanhXdX (float x)
    {
        let a = x * x;
        return ((a + 105) * a + 945) / ((15 * a + 420) * a + 945);
    }

    void run()
    {
        updateDerivedVariables();

        let g0inv = 1.0f;
        let g1inv = 1.0f / 1.836f;
        let g2inv = 1.0f / (3 * 1.836f);

        float32 s0, s1, s2, s3, zi;

        loop
        {
            let in = audioIn;

            // input with half delay, for non-linearities
            let ih = 0.5f * (in + zi);

            // evaluate the non-linear gains
            let t0 = f * g0inv * tanhXdX (g0inv * (ih - r * s3));
            let t1 = f * g1inv * tanhXdX (g1inv * (s1 - s0));
            let t2 = f * g1inv * tanhXdX (g1inv * (s2 - s1));
            let t3 = f * g1inv * tanhXdX (g1inv * (s3 - s2));
            let t4 = f * g2inv * tanhXdX (g2inv * s3);

            // This formula gives the result for y3 thanks to MATLAB
            var y3 = (s2 + s3 + t2 * (s1 + s2 + s3 + t1 * (s0 + s1 + s2 + s3 + t0 * in))
                        + t1 * (2 * s2 + 2 * s3)) * t3 + s3 + 2 * s3 * t1 + t2 * (2 * s3 + 3 * s3 * t1);

            y3 /= (t4 + t1 * (2 * t4 + 4) + t2 * (t4 + t1 * (t4 + r * t0 + 4) + 3) + 2) * t3 + t4 + t1 * (2 * t4 + 2)
                    + t2 * (2 * t4 + t1 * (3 * t4 + 3) + 2) + 1;

            // Other outputs
            let y2 = (s3 - (1 + t4 + t3) * y3) / (-t3);
            let y1 = (s2 - (1 + t3 + t2) * y2 + t3 * y3) / (-t2);
            let y0 = (s1 - (1 + t2 + t1) * y1 + t2 * y2) / (-t1);
            let xx = in - r * y3;

            // update state
            s0 += 2 * (t0 * xx + t1 * (y1 - y0));
            s1 += 2 * (t2 * (y2 - y1) - t1 * (y1 - y0));
            s2 += 2 * (t3 * (y3 - y2) - t2 * (y2 - y1));
            s3 += 2 * (-t4 * y3 - t3 * (y3 - y2));

            zi = in;

            audioOut << y3 * r;
            advance();
        }
    }
}
